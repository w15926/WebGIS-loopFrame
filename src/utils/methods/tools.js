/**
 * @description 得到echarts中风向风速SVG的path（F）
 * @param { grade:Number }
 * @author 王乐翔
 * @createDate 2022/11/10
 * @lastEditDate 
 * @lastEditAuthor 王乐翔
 * @returns
 */
const getAWindDirectionAndSpeedIcon = grade => {
  if (!grade && grade !== 0) {
    Promise.reject(new Error('大哥你没传等级过来啊！'))
    return
  }
  if (grade < 0.3) {
    return 'path://M546.133333 0v1024h-68.266666V0h68.266666z'
  }
  if (grade < 1.6) {
    return 'path://M409.6 0h307.2v68.266667h-307.2z M409.6 1024V0h68.266667v1024z'
  }
  if (grade < 3.4) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 1024V0h68.266666v1024z'
  }
  if (grade < 5.5) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 1024V0h68.266666v1024z M273.066667 170.666667h307.2v68.266666H273.066667z'
  }
  if (grade < 8.0) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 1024V0h68.266666v1024z M273.066667 170.666667h512v68.266666H273.066667z'
  }
  if (grade < 10.8) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 1024V0h68.266666v1024z M273.066667 170.666667h512v68.266666H273.066667zM273.066667 341.333333h307.2v68.266667H273.066667z'
  }
  if (grade < 13.9) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.066667 170.666667h512v68.266666H273.066667zM273.066667 341.333333h512v68.266667H273.066667z'
  }
  if (grade < 17.2) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.066667 170.666667h512v68.266666H273.066667zM273.066667 341.333333h512v68.266667H273.066667zM273.066667 512h512v68.266667H273.066667z'
  }
  if (grade < 20.8) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.544533 251.2896L755.0976 8.533333l30.72 60.962134L304.264533 312.251733z'
  }
  if (grade < 24.5) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.544533 251.2896L755.0976 8.533333l30.72 60.962134L304.264533 312.251733zM273.066667 324.266667h512v68.266666H273.066667z'
  }
  if (grade < 28.5) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.544533 251.2896L755.0976 8.533333l30.72 60.962134L304.264533 312.251733zM273.066667 324.266667h512v68.266666H273.066667zM273.066667 477.866667h512v68.266666H273.066667z'
  }
  if (grade < 32.7) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.544533 251.2896L755.0976 8.533333l30.72 60.962134L304.264533 312.251733zM273.066667 324.266667h512v68.266666H273.066667zM273.066667 477.866667h512v68.266666H273.066667zM273.066667 631.466667h512v68.266666H273.066667z'
  }
  if (grade < 37.0) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.544533 251.2896L755.0976 8.533333l30.72 60.962134L304.264533 312.251733zM273.066667 324.266667h512v68.266666H273.066667zM273.066667 477.866667h512v68.266666H273.066667zM273.066667 631.466667h512v68.266666H273.066667zM273.066667 785.066667h512v68.266666H273.066667z'
  }
  if (grade < 41.5) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.544533 251.2896L755.0976 8.533333l30.72 60.962134L304.264533 312.251733z M273.066667 303.786667h512v68.266666H273.066667z M272.964267 555.2128l481.553066-242.824533 30.72 60.962133-481.518933 242.7904z'
  }
  if (grade < 46.2) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.544533 251.2896L755.0976 8.533333l30.72 60.962134L304.264533 312.251733z M273.066667 303.786667h512v68.266666H273.066667z M272.964267 555.2128l481.553066-242.824533 30.72 60.962133-481.518933 242.7904z M273.066667 614.4h307.2v68.266667H273.066667z'
  }
  if (grade < 51.0) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.544533 251.2896L755.0976 8.533333l30.72 60.962134L304.264533 312.251733z M273.066667 303.786667h512v68.266666H273.066667z M272.964267 555.2128l481.553066-242.824533 30.72 60.962133-481.518933 242.7904z M273.066667 614.4h307.2v68.266667H273.066667zM273.066667 747.52h307.2v68.266667H273.066667z'
  }
  if (grade < 56.1) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.544533 251.2896L755.0976 8.533333l30.72 60.962134L304.264533 312.251733z M273.066667 303.786667h512v68.266666H273.066667z M272.964267 555.2128l481.553066-242.824533 30.72 60.962133-481.518933 242.7904z M273.066667 614.4h512v68.266667H273.066667zM273.066667 730.453333h512v68.266667H273.066667zM273.066667 846.506667h512v68.266666H273.066667z'
  }
  if (grade >= 56.1) {
    return 'path://M273.066667 0h512v68.266667H273.066667z M273.066667 0h68.266666v1024H273.066667z M273.544533 251.2896L755.0976 8.533333l30.72 60.962134L304.264533 312.251733z M273.066667 303.786667h512v68.266666H273.066667z M272.964267 555.2128l481.553066-242.824533 30.72 60.962133-481.518933 242.7904z M273.066667 610.986667h512v68.266666H273.066667z M272.384 859.136l481.5872-242.824533 30.72 60.962133-481.553067 242.7904z'
  }
}

/**
 * @description 模拟实现Java的Thread.sleep()线程睡眠方法
 * @param { num: Number（睡眠次数）, seconds: Number（睡眠秒数） }
 * @author 王乐翔
 * @createDate 2022/11/05
 */
// export const sleep = (num = 1, seconds = 1000) => {
//   const sleepTime = timeout => new Promise(resolve => setTimeout(resolve, timeout))
//   let timer = async count => {
//     for (let i = 0; i < count; i++) { 
//       console.warn('000')
//       await sleepTime(seconds)
//     }
//   }
//   timer(10)
// }

/**
 * @description 生成指定位数 字母数字 验证码 （去除了O、0、i等不好识别的数字和字母）
 * @param { num: Number }
 * @author 王乐翔
 * @createDate 2022/01/13
 * @lastEditDate 2022/03/08
 * @lastEditAuthor 王乐翔
 * @returns 
 */
export const randomCoding = (num = 4) => {
  const arr = ['A', 'a', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'J', 'j', 'K', 'k', 'L', 'M', 'm', 'N', 'n', 'P', 'p', 'Q', 'q', 'R', 'r', 'S', 's', 'T', 't', 'U', 'u', 'V', 'v', 'W', 'w', 'X', 'x', 'Y', 'y', 'Z', 'z', '2', '3', '4', '5', '6', '7', '8', '9']
  let verificationCode = ''
  let count = num
  for (let i = 0; i < count; i++) { verificationCode += arr[Math.floor(Math.random() * arr.length)] }
  return verificationCode
}